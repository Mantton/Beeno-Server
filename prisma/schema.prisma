datasource db {
  provider = "postgres"
  url      = env("DB_URI")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]

}

// Core Models
model Account {
  id              Int          @id @default(autoincrement())
  handle          String       @unique @db.VarChar(18)
  dateCreated     DateTime     @default(now())
  email           String       @unique
  emailVerified   Boolean      @default(false)
  phoneVerified   Boolean      @default(false)
  // Relations
  cards           Card[]
  initiatedTrades TradeOffer[] @relation("initiator")
  receivedTrades  TradeOffer[] @relation("recipient")
  tradePieces     TradePiece[]

  privileges     Privilege[]
  uploadedImages Image[]
  credentials    Credential[]
  @@map("accounts")
}

model Credential {
  accountId   Int     @unique
  hashedValue String
  account     Account @relation(fields: [accountId], references: [id])

  @@map("credentials")
}

model Privilege {
  privilege Int
  accountId Int

  account Account @relation(fields: [accountId], references: [id])
  @@unique([accountId, privilege])
  @@map("privileges")
}

model Company {
  id      Int    @id @unique @default(autoincrement())
  name    String @unique @db.VarChar(40)
  imageId Int?

  groups  Group[]
  artists Artist[]
  image   Image?   @relation(fields: [imageId], references: [id])

  @@map("companies")
}

model Group {
  id        Int     @id @default(autoincrement())
  name      String  @unique @db.VarChar(30)
  companyId Int
  eras      Era[]
  company   Company @relation(fields: [companyId], references: [id])
  image     Image?  @relation(fields: [imageId], references: [id])

  imageId Int?
  members GroupArtist[]
  @@map("groups")
}

model Artist {
  id        Int @id @default(autoincrement())
  companyId Int

  name  String @db.VarChar(20)
  image Image? @relation(fields: [imageId], references: [id])

  // Relations
  company Company @relation(fields: [companyId], references: [id])

  references CardSetArtist[]
  imageId    Int?
  soloEras   Era[]
  groups     GroupArtist[]
  @@map("artists")
}

model GroupArtist {
  artistId Int
  groupId  Int

  group  Group  @relation(fields: [groupId], references: [id])
  artist Artist @relation(fields: [artistId], references: [id])
  @@id([artistId, groupId])
  @@map("group_artists")
}

model Era {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(50) // Title Song Name e.g How You Like That
  startDate DateTime? // Release Date
  groupId   Int?
  artistId  Int?
  imageId   Int?

  image Image? @relation(fields: [imageId], references: [id])

  group       Group?       @relation(fields: [groupId], references: [id])
  artist      Artist?      @relation(fields: [artistId], references: [id])
  collections Collection[]
  @@unique([title, groupId])
  @@map("eras")
}

model Card {
  id      Int  @id @default(autoincrement())
  ownerId Int?

  // Name Identifiers:  Era.title - Artist Name Conjunction - Version - Iteration e.g "HYLT Ros√© Version 5 #453"
  iteration Int
  setId     Int


  // Relations
  owner        Account?     @relation(fields: [ownerId], references: [id])
  set          CardSet      @relation(fields: [setId], references: [id])
  pieceHistory TradePiece[]
  @@unique([setId, iteration])
  @@map("cards")
}

model Collection {
  id    Int       @id @default(autoincrement())
  title String    @db.VarChar(50)
  eraId Int
  era   Era       @relation(fields: [eraId], references: [id], onDelete: Cascade)
  sets  CardSet[]

  @@map("collections")
}

model CardSet {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())

  rarityId     Int
  imageId      Int
  collectionId Int
  published    Boolean @default(false)

  artists    CardSetArtist[]
  cards      Card[]
  rarity     Rarity          @relation(fields: [rarityId], references: [id])
  image      Image           @relation(fields: [imageId], references: [id])
  collection Collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  @@map("cardsets")
}

model Rarity {
  id     Int    @id @default(autoincrement())
  label  String @db.VarChar(20)
  points Int

  CardSet CardSet[]
  @@map("rarities")
}

model CardSetArtist {
  setId    Int
  artistId Int

  set    CardSet @relation(fields: [setId], references: [id], onDelete: Cascade)
  artist Artist  @relation(fields: [artistId], references: [id])

  @@id([setId, artistId])
  @@unique([setId, artistId])
  @@map("cardset_artists")
}

model TradeOffer {
  id                   Int      @id @unique @default(autoincrement())
  initiatorId          Int
  recipientId          Int
  initationTimestamp   DateTime @default(now()) // Initation Time 
  convocationTimestamp DateTime // Convocation Time i.e the timestamp for when the recipient makes a decision on the offer

  initialTradeId Int?
  type           Int // Initial Offer, Locked Initial Offer, Counter Offer, Locked Counter Offer
  status         Int // Accepted, Denied, Countered ,Stale (i.e A card mentioned in this transaction has already transferred ownershi)

  initiator Account @relation("initiator", fields: [initiatorId], references: [id]) // Person Initiating / Sending 
  recipient Account @relation("recipient", fields: [recipientId], references: [id]) // Person Receiving the specified card

  parentTradeOffer      TradeOffer?  @relation("TradeToTrade", fields: [initialTradeId], references: [id])
  subsequentTradeOffers TradeOffer[] @relation("TradeToTrade")


  pieces TradePiece[]

  @@map("trade_offers")
}

model TradePiece {
  cardId       Int
  tradeOfferId Int
  accountId    Int
  isLocked     Boolean @default(false) // Whether or not this card can be removed from subsequest counter offers


  card    Card       @relation(fields: [cardId], references: [id])
  offer   TradeOffer @relation(fields: [tradeOfferId], references: [id])
  account Account    @relation(fields: [accountId], references: [id])

  @@id([cardId, tradeOfferId, accountId])
  @@unique([cardId, tradeOfferId, accountId])
  @@map("trade_pieces")
}

model Image {
  id         Int    @id @unique @default(autoincrement())
  base       String
  uploaderId Int

  uploader Account   @relation(fields: [uploaderId], references: [id])
  company  Company[]
  groups   Group[]
  artists  Artist[]
  sets     CardSet[]

  eras Era[]
  @@map("images")
}

// Packs
// model CompanyPack {
//   id      Int @id @default(autoincrement())
//   ownerId
// }

//TODO: model that allows users to vote on rarity delegation

// Reference Table for Publish Status
// Deleted, Published, Not Published
// model PublishStatus {
//   id  Int @id
//   label String @db.VarChar(15)
// }
