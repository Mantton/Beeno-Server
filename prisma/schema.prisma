datasource db {
  provider = "postgres"
  url      = env("DB_URI")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]

}

// Core Models
model Account {
  id          String   @id @unique @default(uuid()) @db.Uuid
  handle      String   @unique @db.VarChar(18)
  dateCreated DateTime @default(now())
  isVerified  Boolean  @default(false) // sign up with valid phone number


  // Relations
  cards           Card[]
  initiatedTrades TradeOffer[] @relation("initiator")
  receivedTrades  TradeOffer[] @relation("recipient")
  TradePiece      TradePiece[]
  profile         Profile?
  Roll            Roll[]

  @@map("accounts")
}

model Profile {
  accountId   String @unique @db.Uuid
  displayName String @db.VarChar(25)
  // Header Image, Profile Image, color scheme and the gist

  account Account @relation(fields: [accountId], references: [id])

  @@map("profiles")
}

model Company {
  id      Int    @id @unique @default(autoincrement())
  name    String @unique @db.VarChar(40)
  imageId Int?

  groups  Group[]
  artists Artist[]
  image   Image?   @relation(fields: [imageId], references: [id])

  @@map("companies")
}

model Group {
  id        String   @id @unique @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(30)
  companyId Int
  members   Artist[]
  eras      Era[]
  company   Company  @relation(fields: [companyId], references: [id])
  image     Image?   @relation(fields: [imageId], references: [id])

  imageId Int?
  @@map("groups")
}

model Artist {
  id        String  @id @unique @default(uuid()) @db.Uuid
  groupId   String? @db.Uuid
  companyId Int

  name  String @db.VarChar(20)
  image Image? @relation(fields: [imageId], references: [id])

  // Relations
  group   Group?  @relation(fields: [groupId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  cardReferences CardArtist[]
  imageId        Int?
  @@unique([name, groupId])
  @@map("artists")
}

model Era {
  id        String    @id @default(uuid()) @db.Uuid
  title     String    @db.VarChar(50) // Title Song Name e.g How You Like That
  startDate DateTime? // Release Date
  groupId   String    @db.Uuid



  group Group  @relation(fields: [groupId], references: [id])
  cards Card[]
  @@unique([title, groupId])
  @@map("eras")
}

model Card {
  id       String   @id @default(uuid()) @db.Uuid
  ownerId  String?  @db.Uuid
  rarityId Int
  imageId  Int      @unique
  minted   DateTime @default(now())
  rollId   Int? // Initial Roll

  // Name Identifiers:  Era.title - Artist Name Conjunction - Version - Iteration e.g "HYLT Ros√© Version 5 #453"
  iteration Int
  version   Int
  eraId     String @db.Uuid

  // Relations
  rarity Rarity   @relation(fields: [rarityId], references: [id])
  owner  Account? @relation(fields: [ownerId], references: [id])
  image  Image    @relation(fields: [imageId], references: [id])
  roll   Roll?    @relation(fields: [rollId], references: [id])
  era    Era      @relation(fields: [eraId], references: [id])

  pieceHistory TradePiece[]

  artists CardArtist[]
  @@unique([eraId, version, iteration])
  @@map("cards")
}

model CardArtist {
  cardId   String @db.Uuid
  artistId String @db.Uuid

  card   Card   @relation(fields: [cardId], references: [id])
  artist Artist @relation(fields: [artistId], references: [id])

  @@id([cardId, artistId])
  @@unique([cardId, artistId])
  @@map("card_artists")
}

model Rarity {
  id     Int    @id @unique @default(autoincrement())
  label  String @unique @db.VarChar(18)
  points Int    @unique
  cards  Card[]

  @@map("rarity")
}

model TradeOffer {
  id                   Int      @id @unique @default(autoincrement())
  initiatorId          String   @db.Uuid
  recipientId          String   @db.Uuid
  initationTimestamp   DateTime @default(now()) // Initation Time 
  convocationTimestamp DateTime // Convocation Time i.e the timestamp for when the recipient makes a decision on the offer

  initialTradeId Int?
  type           Int // Initial Offer, Locked Initial Offer, Counter Offer, Locked Counter Offer
  status         Int // Accepted, Denied, Countered ,Stale (i.e A card mentioned in this transaction has already transferred ownershi)

  initiator Account @relation("initiator", fields: [initiatorId], references: [id]) // Person Initiating / Sending 
  recipient Account @relation("recipient", fields: [recipientId], references: [id]) // Person Receiving the specified card

  parentTradeOffer      TradeOffer?  @relation("TradeToTrade", fields: [initialTradeId], references: [id])
  subsequentTradeOffers TradeOffer[] @relation("TradeToTrade")


  pieces TradePiece[]

  @@map("trade_offers")
}

model TradePiece {
  cardId       String  @db.Uuid
  tradeOfferId Int
  accountId    String  @db.Uuid
  isLocked     Boolean @default(false) // Whether or not this card can be removed from subsequest counter offers


  card    Card       @relation(fields: [cardId], references: [id])
  offer   TradeOffer @relation(fields: [tradeOfferId], references: [id])
  account Account    @relation(fields: [accountId], references: [id])

  @@id([cardId, tradeOfferId, accountId])
  @@unique([cardId, tradeOfferId, accountId])
  @@map("trade_pieces")
}

model Roll {
  id        Int      @id @default(autoincrement())
  accountId String   @db.Uuid
  timestamp DateTime @default(now())
  cards     Card[]
  byAccount Account  @relation(fields: [accountId], references: [id])

  @@map("rolls")
}

model Image {
  id    Int    @id @unique @default(autoincrement())
  base  String
  cards Card[] // Image Can be used by a set of cards

  Company Company[]
  Group   Group[]
  Artist  Artist[]
  @@map("images")
}

//TODO: model that allows users to vote on rarity delegation
